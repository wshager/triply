{"version":3,"sources":["../src/triply.js"],"names":["Triply","constructor","props","_root","_insert","chimp","create","insertAfter","ref","ins","appendChild","push","pop","remove","insertBefore","open","close","next","isClose","link","movePrevious","prev","previous","moveNext","traverse","peek","firstChild","lastChild","nextSibling","previousSibling","Monkey","Object","assign"],"mappings":"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","sourcesContent":["import * as chimp from \"./chimp\";\r\n\r\n/**\r\n * Tree interface for convenient method chaining\r\n */\r\nclass Triply {\r\n\t/**\r\n     * Create a new tree, using the provided object as the first node\r\n     * @param  {Object} [props={}] Object / node-formatted\r\n     * @return {void}\r\n     */\r\n\tconstructor(props = {}){\r\n\t\tthis._root = this._insert = chimp.create(props);\r\n\t}\r\n\t/**\r\n     * append a sibling after the provided reference or the insertion point\r\n     * @param  {Object} [props={}] Object / node-formatted\r\n     * @param  {Object=} ref       Reference node\r\n     * @return {Triply}            The updated object\r\n     */\r\n\tinsertAfter(props = {},ref) {\r\n\t\tconst ins = chimp.insertAfter(chimp.create(props),ref || this._insert);\r\n\t\tif(!ref) this._insert = ins;\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n     * append a child node to the provided reference or the insertion point\r\n     * @param  {Object} [props={}] Object / node-formatted\r\n     * @param  {Object=} ref       Reference node\r\n     * @return {Triply}            The updated object\r\n     */\r\n\tappendChild(props = {}, ref) {\r\n\t\tconst ins = chimp.appendChild(chimp.create(props),ref || this._insert);\r\n\t\tif(!ref) this._insert = ins;\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n     * add a (sibling) node\r\n     * @param  {Object} [props={}] Object / node-formatted\r\n     * @return {Triply} The updated object\r\n     */\r\n\tpush(props = {}) {\r\n\t\treturn this.insertAfter(props);\r\n\t}\r\n\t/**\r\n     * remove the last node\r\n     * @return {Triply}            The updated object\r\n     */\r\n\tpop(){\r\n\t\tthis._insert = chimp.remove(this._insert);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n     * insert (new) node before insertion point\r\n     * @param  {Object} [props={}] Object / node-formatted\r\n     * @param  {Object=} ref       Reference node\r\n     * @return {Triply}            The updated object\r\n     */\r\n\tinsertBefore(props = {}, ref) {\r\n\t\tconst ins = chimp.insertBefore(chimp.create(props),ref || this._insert);\r\n\t\tif(!ref) this._insert = ins;\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n     * insert new child in current insertion point\r\n     * @param  {Object} [props={}] Object / node-formatted\r\n     * @return {Triply}            The updated object\r\n     */\r\n\topen(props = {}) {\r\n\t\t// create new leaf and move to it\r\n\t\treturn this.appendChild(props);\r\n\t}\r\n\t/**\r\n     *  move insertion point down one level (if possible)\r\n     * @return {Triply} The updated object\r\n     */\r\n\tclose() {\r\n\t\tconst next = chimp.next(this._insert);\r\n\t\tif(next && chimp.isClose(next)) this._insert = chimp.link(next);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n     *  move insertion point back\r\n     * @return {Triply} The updated object\r\n     */\r\n\tmovePrevious() {\r\n\t\tconst prev = this.previous();\r\n\t\tif(prev) this._insert = prev;\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n     *  move insertion point forward\r\n     * @return {Triply} The updated object\r\n     */\r\n\tmoveNext() {\r\n\t\tconst next = this.next();\r\n\t\tif(next) this._insert = next;\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n     * Traverse\r\n     * @yields {Object} [Node-formatted object\r\n     */\r\n\ttraverse() {\r\n\t\treturn chimp.traverse(this._root);\r\n\t}\r\n\t/**\r\n     * Look at next node in traversal after insertion point\r\n     * @return {Object|void} Node-formatted object (if any)\r\n     */\r\n\tnext() {\r\n\t\tconst next = chimp.next(this._insert);\r\n\t\treturn chimp.isClose(next) ? chimp.link(next) : next;\r\n\t}\r\n\t/**\r\n     * Look at previous node in traversal before insertion point\r\n     * @return {Object|void} Node-formatted object (if any)\r\n     */\r\n\tprevious() {\r\n\t\tconst prev = chimp.previous(this._insert);\r\n\t\treturn chimp.isClose(prev) ? chimp.link(prev) : prev;\r\n\t}\r\n\t/**\r\n     * Look at the insertion point\r\n     * @return {Object|void} Node-formatted object (if any)\r\n     */\r\n\tpeek() {\r\n\t\treturn this._insert;\r\n\t}\r\n\t/**\r\n     * Look at the first child of the insertion point\r\n     * @return {Object|void} Node-formatted object (if any)\r\n     */\r\n\tfirstChild() {\r\n\t\treturn chimp.firstChild(this._insert);\r\n\t}\r\n\t/**\r\n     * Look at the last child of the insertion point\r\n     * @return {Object|void} Node-formatted object (if any)\r\n     */\r\n\tlastChild() {\r\n\t\treturn chimp.lastChild(this._insert);\r\n\t}\r\n\t/**\r\n     * Look at the next sibling of the insertion point\r\n     * @return {Object|void} Node-formatted object (if any)\r\n     */\r\n\tnextSibling() {\r\n\t\treturn chimp.nextSibling(this._insert);\r\n\t}\r\n\t/**\r\n     * Look at the previous sibling of the insertion point\r\n     * @return {Object|void} Node-formatted object (if any)\r\n     */\r\n\tpreviousSibling() {\r\n\t\treturn chimp.previousSibling(this._insert);\r\n\t}\r\n}\r\n\r\nconst Monkey = Object.assign(Triply,chimp);\r\n\r\nexport { Monkey as Triply };\r\n\r\nexport default Monkey;\r\n"],"file":"triply.js"}